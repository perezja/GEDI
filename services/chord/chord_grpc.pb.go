// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chord

import (
	context "context"
	common "github.com/gedilabs/services/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ChordClient is the client API for Chord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChordClient interface {
	// Ask node n to find id's successor.
	// This protobuf input message should only have an id.
	FindSuccessor(ctx context.Context, in *Key, opts ...grpc.CallOption) (*common.Node, error)
	// return closest finger preceding id.
	ClosestPrecedingFinger(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ChordNode, error)
	// Getters/Setters for remote variable lookup and assignment
	Predecessor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*common.Node, error)
	Successor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*common.Node, error)
	UpdatePredecessor(ctx context.Context, in *common.Node, opts ...grpc.CallOption) (*common.Status, error)
	// Update the given index 'i' in a nodes finger table with `Chord.Node` if they
	// precede the current finger node occupying that position.
	UpdateFingerTable(ctx context.Context, in *Finger, opts ...grpc.CallOption) (*common.Status, error)
	// Check if node is predecessor and update accordingly
	Notify(ctx context.Context, in *common.Node, opts ...grpc.CallOption) (*common.Status, error)
}

type chordClient struct {
	cc grpc.ClientConnInterface
}

func NewChordClient(cc grpc.ClientConnInterface) ChordClient {
	return &chordClient{cc}
}

func (c *chordClient) FindSuccessor(ctx context.Context, in *Key, opts ...grpc.CallOption) (*common.Node, error) {
	out := new(common.Node)
	err := c.cc.Invoke(ctx, "/chord.Chord/FindSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) ClosestPrecedingFinger(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ChordNode, error) {
	out := new(ChordNode)
	err := c.cc.Invoke(ctx, "/chord.Chord/ClosestPrecedingFinger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Predecessor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*common.Node, error) {
	out := new(common.Node)
	err := c.cc.Invoke(ctx, "/chord.Chord/Predecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Successor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*common.Node, error) {
	out := new(common.Node)
	err := c.cc.Invoke(ctx, "/chord.Chord/Successor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) UpdatePredecessor(ctx context.Context, in *common.Node, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/chord.Chord/UpdatePredecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) UpdateFingerTable(ctx context.Context, in *Finger, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/chord.Chord/UpdateFingerTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Notify(ctx context.Context, in *common.Node, opts ...grpc.CallOption) (*common.Status, error) {
	out := new(common.Status)
	err := c.cc.Invoke(ctx, "/chord.Chord/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChordServer is the server API for Chord service.
// All implementations must embed UnimplementedChordServer
// for forward compatibility
type ChordServer interface {
	// Ask node n to find id's successor.
	// This protobuf input message should only have an id.
	FindSuccessor(context.Context, *Key) (*common.Node, error)
	// return closest finger preceding id.
	ClosestPrecedingFinger(context.Context, *Key) (*ChordNode, error)
	// Getters/Setters for remote variable lookup and assignment
	Predecessor(context.Context, *Empty) (*common.Node, error)
	Successor(context.Context, *Empty) (*common.Node, error)
	UpdatePredecessor(context.Context, *common.Node) (*common.Status, error)
	// Update the given index 'i' in a nodes finger table with `Chord.Node` if they
	// precede the current finger node occupying that position.
	UpdateFingerTable(context.Context, *Finger) (*common.Status, error)
	// Check if node is predecessor and update accordingly
	Notify(context.Context, *common.Node) (*common.Status, error)
	mustEmbedUnimplementedChordServer()
}

// UnimplementedChordServer must be embedded to have forward compatible implementations.
type UnimplementedChordServer struct {
}

func (UnimplementedChordServer) FindSuccessor(context.Context, *Key) (*common.Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessor not implemented")
}
func (UnimplementedChordServer) ClosestPrecedingFinger(context.Context, *Key) (*ChordNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosestPrecedingFinger not implemented")
}
func (UnimplementedChordServer) Predecessor(context.Context, *Empty) (*common.Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predecessor not implemented")
}
func (UnimplementedChordServer) Successor(context.Context, *Empty) (*common.Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Successor not implemented")
}
func (UnimplementedChordServer) UpdatePredecessor(context.Context, *common.Node) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePredecessor not implemented")
}
func (UnimplementedChordServer) UpdateFingerTable(context.Context, *Finger) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFingerTable not implemented")
}
func (UnimplementedChordServer) Notify(context.Context, *common.Node) (*common.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedChordServer) mustEmbedUnimplementedChordServer() {}

// UnsafeChordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChordServer will
// result in compilation errors.
type UnsafeChordServer interface {
	mustEmbedUnimplementedChordServer()
}

func RegisterChordServer(s grpc.ServiceRegistrar, srv ChordServer) {
	s.RegisterService(&_Chord_serviceDesc, srv)
}

func _Chord_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/FindSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).FindSuccessor(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_ClosestPrecedingFinger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).ClosestPrecedingFinger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/ClosestPrecedingFinger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).ClosestPrecedingFinger(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Predecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Predecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/Predecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Predecessor(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Successor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Successor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/Successor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Successor(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_UpdatePredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).UpdatePredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/UpdatePredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).UpdatePredecessor(ctx, req.(*common.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_UpdateFingerTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Finger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).UpdateFingerTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/UpdateFingerTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).UpdateFingerTable(ctx, req.(*Finger))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Notify(ctx, req.(*common.Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chord.Chord",
	HandlerType: (*ChordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSuccessor",
			Handler:    _Chord_FindSuccessor_Handler,
		},
		{
			MethodName: "ClosestPrecedingFinger",
			Handler:    _Chord_ClosestPrecedingFinger_Handler,
		},
		{
			MethodName: "Predecessor",
			Handler:    _Chord_Predecessor_Handler,
		},
		{
			MethodName: "Successor",
			Handler:    _Chord_Successor_Handler,
		},
		{
			MethodName: "UpdatePredecessor",
			Handler:    _Chord_UpdatePredecessor_Handler,
		},
		{
			MethodName: "UpdateFingerTable",
			Handler:    _Chord_UpdateFingerTable_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Chord_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chord/chord.proto",
}
